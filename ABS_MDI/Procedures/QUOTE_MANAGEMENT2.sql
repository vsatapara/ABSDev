CREATE OR REPLACE PROCEDURE abs_mdi."QUOTE_MANAGEMENT2" (
    ProjectId IN NUMBER,
    --UserId IN Varchar2,
    OutputId OUT number) AS
NewBuildingInformationId number;
NewGirtSpacingId number;
NewGirtBaySpaceId number;
NewGuid RAW(50);
NewBracingId number;
NewPartitionId number;
BEGIN
    INSERT INTO "Project"(
			"ProjectName",
			"IsActive",
			"IsDelete",
			"CreatedDate",
			"BuildingsCount",
			"BuildingLocation",
			"ProjectStatusId",
			"ExpiryDate",
			"Price",
			"UserId",
			"CreatedBy",
			"IpAddress",
			"ProjectUseId",
			"RiskCategoryId",
			"CityLimit",
			"MaterialOriginId",
			"Address1",
			"Address2",
			"City",
			"Region",
			"State",
			"Country",
			"ZipPostalCode",
			"QuoteRequestDate",
			"PriceStatus",
			"Latitude",
			"Longitude",
			"DesignCodeId",
			"DesignCodeName",
			"ProjectUseCategoryid",
			"WindSpeed",
			"WindExposureId",
			"IsHurricaneCoastline",
			"LiveLoad",
			"IsLiveLoadReductionAllowed",
			"GroundSnow",
			"SnowExposureId",
			"MinimumSnowLoad",
			"Elevation",
			"RainIntensity",
			"SustainablilityGoalId",
			"IsClimateControlled",
			"EnergyEfficiencyId",
			"IsAirInfiltrationRequired",
			"CustomerNo",
			"SeismicSa",
			"SeismicS1",
			"SeismicSnowLoad",
			"SeismicSnowPercentage",
			"SiteClassId",
			"InputDimensional",
			"InputEngineering",
			"OutputDimensional",
			"OutputEngineering",
			"CurrencyDimensional",
			"IsCanadaBasedDesignCode",
			"IsDesignCodeIbc2012Based",
			"RainLoad",
			"SeismicSa1Dot0",
			"SeismicSa2Dot0",
			"WindLoad",
			"IsUserDefinedSustainability",
			"UserDefinedSustainability",
			"CompanyId",
			"CBBInquiryNumber",
			"MinAnchorRodDiameter",
			"TDIRequired",
			"UsingSystemGeneratedRodPlan",
			"EnteredBy",
			"ProjectBuildingType",
			"UserRoleId",
			"ProjectStage",
			"IsArchive",
			"UserType",
			"IsProjectPriced",
			"PriceDate",
			"ProjectPriceDataPath",
			"ExportedToOEDate",
			"ExportToEDSDate",
			"ReportPath",
			"CADDrawingPath",
			"JobNumber",
			"Ignore_ufc",
			"Warn_hot_dipped",
			"RequestShipDate",
			"ConstructionDate",
			"AnchorRodDate",
			"SubmittedDate",
			"PGASeismic",
			"IsOverrideSeismicSa",
			"IsOverrideSeismicS1",
			"IsOverrideSeismicSa1Dot0",
			"IsOverrideSeismicSa2Dot0",
			"IsOverrideWindSpeed",
			"IsOverrideWindLoad",
			"IsOverrideLiveLoad",
			"IsOverrideGroundSnow",
			"IsOverrideRainIntensity",
			"IsOverrideRainLoad",
			"IsOverridePGASeismic",
			"WindLoadType")
  VALUES((SELECT "ProjectName" ||'(Copy)' FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsActive" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsDelete" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CreatedDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "BuildingsCount" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "BuildingLocation" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ProjectStatusId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ExpiryDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Price" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "UserId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CreatedBy" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IpAddress" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ProjectUseId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "RiskCategoryId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CityLimit" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "MaterialOriginId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Address1" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Address2" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "City" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Region" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "State" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Country" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ZipPostalCode" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "QuoteRequestDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "PriceStatus" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Latitude" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Longitude" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "DesignCodeId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "DesignCodeName" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ProjectUseCategoryid" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "WindSpeed" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "WindExposureId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsHurricaneCoastline" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "LiveLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsLiveLoadReductionAllowed" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "GroundSnow" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SnowExposureId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "MinimumSnowLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Elevation" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "RainIntensity" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SustainablilityGoalId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsClimateControlled" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "EnergyEfficiencyId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsAirInfiltrationRequired" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CustomerNo" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SeismicSa" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SeismicS1" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SeismicSnowLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SeismicSnowPercentage" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SiteClassId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "InputDimensional" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "InputEngineering" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "OutputDimensional" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "OutputEngineering" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CurrencyDimensional" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsCanadaBasedDesignCode" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsDesignCodeIbc2012Based" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "RainLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SeismicSa1Dot0" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SeismicSa2Dot0" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "WindLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsUserDefinedSustainability" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "UserDefinedSustainability" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CompanyId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CBBInquiryNumber" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "MinAnchorRodDiameter" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "TDIRequired" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "UsingSystemGeneratedRodPlan" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "EnteredBy" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ProjectBuildingType" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "UserRoleId" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ProjectStage" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsArchive" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "UserType" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsProjectPriced" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "PriceDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ProjectPriceDataPath" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ExportedToOEDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ExportToEDSDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ReportPath" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "CADDrawingPath" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "JobNumber" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Ignore_ufc" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "Warn_hot_dipped" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "RequestShipDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "ConstructionDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "AnchorRodDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "SubmittedDate" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "PGASeismic" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideSeismicSa" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideSeismicS1" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideSeismicSa1Dot0" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideSeismicSa2Dot0" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideWindSpeed" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideWindLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideLiveLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideGroundSnow" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideRainIntensity" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverrideRainLoad" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "IsOverridePGASeismic" FROM "Project" WHERE "ProjectId" = ProjectId),
		(SELECT "WindLoadType" FROM "Project" WHERE "ProjectId" = ProjectId)) returning "ProjectId" into OutputId;
	INSERT INTO "Purchaser"(
        "PurchaserName",
        "Contact",
        "Country",
        "State",
        "City",
        "County",
        "Address1",
        "Address2",
        "ZipCode",
        "EmailAddress",
        "PhoneNumber",
        "OvernightCountry",
        "OvernightState",
        "OvernightCity",
        "OvernightCounty",
        "OvernightAddress1",
        "OvernightAddress2",
        "OvernightZipCode",
        "FederalTaxIDNumber",
        "CecoErection",
        "SellerFurnish",
        "SellerErect",
        "FaxNumber",
        "BuyerNumber",
        "BuyerName",
        "BuyerCareOf",
        "BuyerCountry",
        "BuyerIntSite",
        "BuyerState",
        "BuyerCounty",
        "BuyerAddress",
        "BuyerCity",
        "BuyerZipCode",
        "BuyerMailCountry",
        "BuyerMailIntSite",
        "BuyerMailState",
        "BuyerMailCounty",
        "BuyerMailAddress",
        "BuyerMailCity",
        "BuyerMailZipCode",
        "BuyerContactName",
        "BuyerEmail1",
        "BuyerEmail2",
        "BuyerDayPhone",
        "BuyerFaxNumber",
        "BuyerNightPhone",
        "BuyerMobileNumber",
        "CreatedBy",
        "CreatedDate",
        "IpAddress",
        "IsDelete",
        "ProjectId",
        "ManagerName")
	SELECT
		"PurchaserName",
		"Contact",
		"Country",
		"State",
		"City",
		"County",
		"Address1",
		"Address2",
		"ZipCode",
		"EmailAddress",
		"PhoneNumber",
		"OvernightCountry",
		"OvernightState",
		"OvernightCity",
		"OvernightCounty",
		"OvernightAddress1",
		"OvernightAddress2",
		"OvernightZipCode",
		"FederalTaxIDNumber",
		"CecoErection",
		"SellerFurnish",
		"SellerErect",
		"FaxNumber",
		"BuyerNumber",
		"BuyerName",
		"BuyerCareOf",
		"BuyerCountry",
		"BuyerIntSite",
		"BuyerState",
		"BuyerCounty",
		"BuyerAddress",
		"BuyerCity",
		"BuyerZipCode",
		"BuyerMailCountry",
		"BuyerMailIntSite",
		"BuyerMailState",
		"BuyerMailCounty",
		"BuyerMailAddress",
		"BuyerMailCity",
		"BuyerMailZipCode",
		"BuyerContactName",
		"BuyerEmail1",
		"BuyerEmail2",
		"BuyerDayPhone",
		"BuyerFaxNumber",
		"BuyerNightPhone",
		"BuyerMobileNumber",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDelete",
		OutputId,
		"ManagerName"
	FROM "Purchaser"
    WHERE "ProjectId" = ProjectId;
    INSERT INTO "EDSPrice_I_Owner"(
		"ProjectId",
		"BuildingOwner",
		"Attention",
		"Country",
		"State",
		"County",
		"City",
		"Address1",
		"Address2",
		"ZipCode",
		"BusinessName",
		"EndUseOfBuilding",
		"LeadSource",
		"InternationalSite",
		"ProjectNumber",
		"PhoneNumber",
		naics,
		"SubmittalPackage",
		"OverrideIncompletePrice",
		"CrmOpportunityNumber",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted") 
   	SELECT
		OutputId,
		"BuildingOwner",
		"Attention",
		"Country",
		"State",
		"County",
		"City",
		"Address1",
		"Address2",
		"ZipCode",
		"BusinessName",
		"EndUseOfBuilding",
		"LeadSource",
		"InternationalSite",
		"ProjectNumber",
		"PhoneNumber",
		naics,
		"SubmittalPackage",
		"OverrideIncompletePrice",
		"CrmOpportunityNumber",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted"
	FROM "EDSPrice_I_Owner"
    WHERE "ProjectId" = ProjectId;
   INSERT INTO "I_Address"(
		"ProjectId",
		"Address1",
		"Address2",
		"Country",
		"State",
		"County",
		"City",
		"ZipCode",
		"Longitude",
		"Latitude",
		"CreatedBy",
		"CreatedDate",
		"IsDelete",
		"IpAddress",
		"AddressType")
	SELECT
		OutputId,
		"Address1",
		"Address2",
		"Country",
		"State",
		"County",
		"City",
		"ZipCode",
		"Longitude",
		"Latitude",
		"CreatedBy",
		"CreatedDate",
		"IsDelete",
		"IpAddress",
		"AddressType"
	FROM "I_Address"
    WHERE "ProjectId" = ProjectId;
    INSERT INTO "Shipping"(
		"ProjectId",
		"ShippingPointId",
		"ShippingTerms",
		"ShippingContact",
		"Notification",
		"DayPhone",
		"NightPhone",
		"FreightTerms",
		"FreightExpense",
		"Carrier",
		"Country",
		"State",
		"County",
		"City",
		"Address1",
		"Address2",
		"ZipCode",
		"Latitude",
		"Longitude",
		"RequestedDeliveryDate",
		"Miles1",
		"Miles2",
		"Miles3",
		"Rate1",
		"Rate2",
		"Rate3",
		"NumberLoads1",
		"NumberLoads2",
		"NumberLoads3",
		"TruckTarps",
		"CopyFlag",
		"AddIMPOverages",
		"AddExportOverages",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"InternationalSite")
    SELECT
		OutputId,
		"ShippingPointId",
		"ShippingTerms",
		"ShippingContact",
		"Notification",
		"DayPhone",
		"NightPhone",
		"FreightTerms",
		"FreightExpense",
		"Carrier",
		"Country",
		"State",
		"County",
		"City",
		"Address1",
		"Address2",
		"ZipCode",
		"Latitude",
		"Longitude",
		"RequestedDeliveryDate",
		"Miles1",
		"Miles2",
		"Miles3",
		"Rate1",
		"Rate2",
		"Rate3",
		"NumberLoads1",
		"NumberLoads2",
		"NumberLoads3",
		"TruckTarps",
		"CopyFlag",
		"AddIMPOverages",
		"AddExportOverages",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"InternationalSite"
	FROM "Shipping"
    WHERE "ProjectId" = ProjectId;
	INSERT INTO "EDSPrice_I_Payment"(
		"AuthorizedSignature",
		"OrderedBy",
		"BuilderPO",
		"CreditTerms",
		"Bank",
		"Teller",
		"TaxExemptStatus",
		"TaxExemptNumber",
		"TaxIncluded",
		"Multiplier",
		"ProjectNumber",
		"IMPOverage",
		"ClarificationDayPhone",
		"MultiplierAuthorization",
		"GCName",
		"GCState",
		"GCCity",
		"ErectorName",
		"ErectorState",
		"ErectorCity",
		"LenderName",
		"LenderState",
		"LenderCity",
		"LenderAddress",
		"LenderZipcode",
		"LenderPhone",
		"LenderAddress2",
		"IMPFreightPerBuilding",
		"ValidUntil",
		"DateAuthorized",
		"MultiplierBWXGenerated",
		"MultiplierStart",
		"MultiplierTarget",
		"MultiplierFloor",
		"MultiplierRequested",
		"MultiplierSuggested",
		"ProjectGuid",
		"ProjectFile",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"ProjectId",
		gccountry,
		erectorcountry,
		lendercountry,
		"EstimatorInitials")
    SELECT
		"AuthorizedSignature",
		"OrderedBy",
		"BuilderPO",
		"CreditTerms",
		"Bank",
		"Teller",
		"TaxExemptStatus",
		"TaxExemptNumber",
		"TaxIncluded",
		"Multiplier",
		"ProjectNumber",
		"IMPOverage",
		"ClarificationDayPhone",
		"MultiplierAuthorization",
		"GCName",
		"GCState",
		"GCCity",
		"ErectorName",
		"ErectorState",
		"ErectorCity",
		"LenderName",
		"LenderState",
		"LenderCity",
		"LenderAddress",
		"LenderZipcode",
		"LenderPhone",
		"LenderAddress2",
		"IMPFreightPerBuilding",
		"ValidUntil",
		"DateAuthorized",
		"MultiplierBWXGenerated",
		"MultiplierStart",
		"MultiplierTarget",
		"MultiplierFloor",
		"MultiplierRequested",
		"MultiplierSuggested",
		"ProjectGuid",
		"ProjectFile",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		OutputId,
		gccountry,
		erectorcountry,
		lendercountry,
		"EstimatorInitials"
	FROM "EDSPrice_I_Payment"
    WHERE "ProjectId" = ProjectId;
	INSERT INTO "BuildingInformation"(
		"BuildingLabel",
		"Structure",
		"BuildingName",
		"BuildingType",
		"Elevation",
		"FrameType",
		"ProjectId",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDelete",
		"AttachmentElevation",
		"HighSideWallElevation",
		"ParentBuildingId",
		"BuildingHasInsulation",
		"InsulationByBrand",
		"ComCheck",
		"IsComplete",
		"UseSeismicDesignCategory")
      SELECT
		"BuildingLabel",
		"Structure",
		"BuildingName",
		"BuildingType",
		"Elevation",
		"FrameType",
		OutputId,
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDelete",
		"AttachmentElevation",
		"HighSideWallElevation",
		"ParentBuildingId",
		"BuildingHasInsulation",
		"InsulationByBrand",
		"ComCheck",
		"IsComplete",
		"UseSeismicDesignCategory"
        FROM "BuildingInformation"
        WHERE "ProjectId" = ProjectId
        ORDER BY "BuildingInformationId","BuildingName";
    INSERT INTO "GeometryInformation"(
		"BuildingInformationId",
		"BuildingWidth",
		"BuildingLength",
		"DistanceToRidgeSideWallB",
		"DistanceToRidgeSideWallD",
		"DistanceToRidgeSideWallA",
		"DistanceToRidgeSideWallC",
		"EaveHeightSideWallB",
		"EaveHeightSideWallD",
		"RoofSlopeSideWallB",
		"RoofSlopeSideWallD",
		"EaveHeightSideWallA",
		"EaveHeightSideWallC",
		"RoofSlopeSideWallA",
		"RoofSlopeSideWallC",
		"Swa",
		"Swb",
		"CreatedBy",
		"CreatedDate",
		"Category",
		"CurrentBuilding",
		"AvailableBuilding",
		"Elevation",
		"XDistance",
		"YDistance",
		"OffsetDistance",
		"StartColumn",
		"StopColumn",
		"XDirection",
		"YDirection",
		"AttachmentOffset",
		"PeakHeight",
		"WindEnclosure",
		"AccessoryEnclosure",
		"OAEnclosure",
		"XCoordinate",
		"YCoordinate",
		"IsDeleted")
    SELECT
		x.NewBuildingInformationId,
		gi."BuildingWidth",
		gi."BuildingLength",
		gi."DistanceToRidgeSideWallB",
		gi."DistanceToRidgeSideWallD",
		gi."DistanceToRidgeSideWallA",
		gi."DistanceToRidgeSideWallC",
		gi."EaveHeightSideWallB",
		gi."EaveHeightSideWallD",
		gi."RoofSlopeSideWallB",
		gi."RoofSlopeSideWallD",
		gi."EaveHeightSideWallA",
		gi."EaveHeightSideWallC",
		gi."RoofSlopeSideWallA",
		gi."RoofSlopeSideWallC",
		gi."Swa",
		gi."Swb",
		gi."CreatedBy",
		gi."CreatedDate",
		gi."Category",
		gi."CurrentBuilding",
		gi."AvailableBuilding",
		gi."Elevation",
		gi."XDistance",
		gi."YDistance",
		gi."OffsetDistance",
		gi."StartColumn",
		gi."StopColumn",
		gi."XDirection",
		gi."YDirection",
		gi."AttachmentOffset",
		gi."PeakHeight",
		gi."WindEnclosure",
		gi."AccessoryEnclosure",
		gi."OAEnclosure",
		gi."XCoordinate",
		gi."YCoordinate",
		gi."IsDeleted"
	FROM "GeometryInformation" gi
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x ON gi."BuildingInformationId" = x.ExistingBuildingInformationId;
	INSERT INTO "Input_GirtsBaySpacing"(
		"BuildingInformationId",
		"SW1Style",
		"SW2Style",
		"EW1Style",
		"EW2Style",
		"RoofPurlinStyle",
		"SW1Depth",
		"SW2Depth",
		"EW1Depth",
		"EW2Depth",
		"RoofPurlinDepth",
		"SW1Optimize",
		"SW2Optimize",
		"EW1Optimize",
		"EW2Optimize",
		"RoofPurlinOptimize",
		"RoofBaySpacing",
		"WallBaySpacing",
		"GirtSpacing",
		"PurlinSpacing",
		"LBPMinDepth",
		"LBPMaxDepth",
		"CreatedBy",
		"CreatedDate",
		"IsDelete",
		"IpAddress",
		"FrameBoltWashers",
		"GrayPrimer",
		"OptimizeGirt1",
		"OptimizeGirt2",
		"OptimizePurlin",
		"GirtWidth1",
		"GirtWidth2",
		"PurlinWidth",
		"PortalRafterDepth1",
		"PortalRafterDepth2",
		"PortalColumnDepth1",
		"PortalColumnDepth2",
		"LBPBracingLoc")
    SELECT 
		x1.NewBuildingInformationId,
		igbs."SW1Style",
		igbs."SW2Style",
		igbs."EW1Style",
		igbs."EW2Style",
		igbs."RoofPurlinStyle",
		igbs."SW1Depth",
		igbs."SW2Depth",
		igbs."EW1Depth",
		igbs."EW2Depth",
		igbs."RoofPurlinDepth",
		igbs."SW1Optimize",
		igbs."SW2Optimize",
		igbs."EW1Optimize",
		igbs."EW2Optimize",
		igbs."RoofPurlinOptimize",
		igbs."RoofBaySpacing",
		igbs."WallBaySpacing",
		igbs."GirtSpacing",
		igbs."PurlinSpacing",
		igbs."LBPMinDepth",
		igbs."LBPMaxDepth",
		igbs."CreatedBy",
		igbs."CreatedDate",
		igbs."IsDelete",
		igbs."IpAddress",
		igbs."FrameBoltWashers",
		igbs."GrayPrimer",
		igbs."OptimizeGirt1",
		igbs."OptimizeGirt2",
		igbs."OptimizePurlin",
		igbs."GirtWidth1",
		igbs."GirtWidth2",
		igbs."PurlinWidth",
		igbs."PortalRafterDepth1",
		igbs."PortalRafterDepth2",
		igbs."PortalColumnDepth1",
		igbs."PortalColumnDepth2",
		igbs."LBPBracingLoc"
    FROM "Input_GirtsBaySpacing" igbs
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x1 ON igbs."BuildingInformationId" = x1.ExistingBuildingInformationId;
	INSERT INTO "Input_Bays"(
		"BuildingInformationId",
		"Elevation",
		"BayNumber",
		"Width")
	SELECT
		x2.NewBuildingInformationId,
		ib."Elevation",
		ib."BayNumber",
		ib."Width"
	FROM "Input_Bays" ib
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x2 ON ib."BuildingInformationId" = x2.ExistingBuildingInformationId;
	INSERT INTO "Input_GirtsBaySpacing_Girt"(
		"GirtSpacingId",
		"SW1Type",
		"SW2Type",
		"EW1Type",
		"EW2Type")
    SELECT   
		y1.NewGirtSpacingId,
		igbsg."SW1Type",
		igbsg."SW2Type",
		igbsg."EW1Type",
		igbsg."EW2Type"        
     FROM "Input_GirtsBaySpacing_Girt" igbsg
     INNER JOIN (SELECT i1."GirtSpacingId" ExistingGirtSpacingId, i2."GirtSpacingId" NewGirtSpacingId FROM
        (SELECT igbs."GirtSpacingId" FROM "Input_GirtsBaySpacing" igbs
        INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b1."BuildingInformationId" ExistingBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1)x1 
        ON igbs."BuildingInformationId" = x1.ExistingBuildingInformationId)i1,
        (SELECT igbs."GirtSpacingId" FROM "Input_GirtsBaySpacing" igbs 
        INNER JOIN (SELECT b2."ProjectId" NewProjectId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x1 
        ON igbs."BuildingInformationId" = x1.NewBuildingInformationId)i2)y1 ON igbsg."GirtSpacingId" = y1.ExistingGirtSpacingId
        ORDER BY "GirtSpacingId", "GirtBaySpaceId";
--
--	INSERT INTO "Input_GirtsBaySpacing_GirtSpecified"(
--		"GirtBaySpaceId",
--		"Elevation",
--		"SpacingNumber",
--		"Spacing",
--		"Type")
--
--    SELECT
--		NewGirtBaySpaceId,
--		igsgs."Elevation",
--		igsgs."SpacingNumber",
--		igsgs."Spacing",
--		igsgs."Type"
--	FROM "Input_GirtsBaySpacing_GirtSpecified" igsgs
--    INNER JOIN "Input_GirtsBaySpacing_Girt" igg ON igsgs."GirtBaySpaceId" = igg."GirtBaySpaceId"
--    INNER JOIN "Input_GirtsBaySpacing" igs ON igg."GirtSpacingId" = igs. "GirtSpacingId"
--	INNER JOIN "BuildingInformation" bi ON igs."BuildingInformationId" = bi."BuildingInformationId"
--    WHERE bi."ProjectId" = ProjectId;
--
--	INSERT INTO "Input_GirtsBaySpacing_Purlin"(
--		"GirtSpacingId",
--		"NominalSpacing",
--		"OnSlope")
--	SELECT
--		NewGirtSpacingId,
--		igp."NominalSpacing",
--		igp."OnSlope"
--	FROM "Input_GirtsBaySpacing_Purlin" igp
--    INNER JOIN "Input_GirtsBaySpacing" igs ON igp."GirtSpacingId" = igs. "GirtSpacingId"
--	INNER JOIN "BuildingInformation" bi ON igs."BuildingInformationId" = bi."BuildingInformationId"
--    WHERE bi."ProjectId" = ProjectId;
	INSERT INTO "Input_GirtsBaySpacing_Wall"(
		"GirtSpacingId",
		"Elevation",
		"RoofBayNumber",
		"DistFromLeftColumn",
		"BaseRecess",
		"RoofBayWidth",
		"Sequence",
		"mFlangeWidth",
		"mFlangeThick",
		"mWebDepth",
		"mWebThick",
		"mBasePlateWidth",
		"mBasePlateLength",
		"mBasePlateThick",
		"mABOffset",
		"mABGauge",
		"mABSpace",
		"mABDia",
		"mEavePlateWidth",
		"mEavePlateLength",
		"mEavePlateThick",
		"mEaveGussetWidth",
		"mEaveGussetLength",
		"mEaveGussetThick",
		"mKnifePlateWidth",
		"mKnifePlateLength",
		"mKnifePlateThick",
		"mRodDia",
		"mClevisPlateWidth",
		"mClevisPlateLength",
		"mClevisPlateThick")
	SELECT
		NewGirtSpacingId,
		igw."Elevation",
		igw."RoofBayNumber",
		igw."DistFromLeftColumn",
		igw."BaseRecess",
		igw."RoofBayWidth",
		igw."Sequence",
		igw."mFlangeWidth",
		igw."mFlangeThick",
		igw."mWebDepth",
		igw."mWebThick",
		igw."mBasePlateWidth",
		igw."mBasePlateLength",
		igw."mBasePlateThick",
		igw."mABOffset",
		igw."mABGauge",
		igw."mABSpace",
		igw."mABDia",
		igw."mEavePlateWidth",
		igw."mEavePlateLength",
		igw."mEavePlateThick",
		igw."mEaveGussetWidth",
		igw."mEaveGussetLength",
		igw."mEaveGussetThick",
		igw."mKnifePlateWidth",
		igw."mKnifePlateLength",
		igw."mKnifePlateThick",
		igw."mRodDia",
		igw."mClevisPlateWidth",
		igw."mClevisPlateLength",
		igw."mClevisPlateThick"
	FROM "Input_GirtsBaySpacing_Wall" igw
    INNER JOIN "Input_GirtsBaySpacing" igs ON igw."GirtSpacingId" = igs. "GirtSpacingId"
	INNER JOIN "BuildingInformation" bi ON igs."BuildingInformationId" = bi."BuildingInformationId"
    WHERE bi."ProjectId" = ProjectId;
	INSERT INTO "Input_ShopCoat"(
		"BuildingInformationId",
		"GalvanizedSecondary",
		"SealWelds",
		"HotDippedPrimary",
		"HotDippedPrice",
		"HotDippedWeight",
		"SealWeldsPrice",
		"SealWeldsWeight",
		"QuoteNumber",
		"QuoteYear",
		"EstimatorInitials",
		"ExpiresOn",
		"BoltFinish",
		"CreatedBy",
		"CreatedDate",
		"IsDelete",
		"IpAddress",
		"ShopCoatDrpId")
	SELECT
		x3.NewBuildingInformationId,
		isc."GalvanizedSecondary",
		isc."SealWelds",
		isc."HotDippedPrimary",
		isc."HotDippedPrice",
		isc."HotDippedWeight",
		isc."SealWeldsPrice",
		isc."SealWeldsWeight",
		isc."QuoteNumber",
		isc."QuoteYear",
		isc."EstimatorInitials",
		isc."ExpiresOn",
		isc."BoltFinish",
		isc."CreatedBy",
		isc."CreatedDate",
		isc."IsDelete",
		isc."IpAddress",
		isc."ShopCoatDrpId"
	FROM "Input_ShopCoat" isc
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x3 ON isc."BuildingInformationId" = x3.ExistingBuildingInformationId;
	INSERT INTO "Input_AddLines"(
		"BuildingInformationId",
		"Description",
		"UnitWeight",
		"UnitPrice",
		"ListOrNet",
		"ExpiresOn",
		"QuoteNumber",
		"QuoteYear",
		"EstInitials",
		"Guid",
		"Quantity",
		"Internal",
		"IncludeFreight",
		"DontShowPriceWeight",
		"IsSpecialized",
		"ScreenType",
		"TaxApplied",
		"AdjustmentFactor",
		"Expired",
		"Category",
		"BuiltupWeight",
		"BuiltupPrice",
		"HotrolledWeight",
		"HotrolledPrice",
		"ColdformWeight",
		"ColdformPrice",
		"FabColdformWeight",
		"FabColdformPrice",
		"RoofpanelWeight",
		"RoofpanelPrice",
		"WallpanelWeight",
		"WallpanelPrice",
		"TrimWeight",
		"TrimPrice",
		"BuyoutsWeight",
		"BuyoutsPrice",
		"WarehouseWeight",
		"WarehousePrice",
		"OtherWeight",
		"OtherPrice",
		"AdditionalEngineering",
		"DrawingsCalcs",
		"WTWarranty",
		insulation,
		"Freight",
		"FabricatedICF",
		"BuyoutMarkup",
		"DetailsByPercentage",
		"MezzanineNumber",
		"RmgPrice",
		"ProjectId",
		"IpAddress",
		"IsDelete",
		"CreatedBy",
		"CreatedDate")
    SELECT 
        x4.NewBuildingInformationId,
		ia."Description",
		ia."UnitWeight",
		ia."UnitPrice",
		ia."ListOrNet",
		ia."ExpiresOn",
		ia."QuoteNumber",
		ia."QuoteYear",
		ia."EstInitials",
		ia."Guid",
		ia."Quantity",
		ia."Internal",
		ia."IncludeFreight",
		ia."DontShowPriceWeight",
		ia."IsSpecialized",
		ia."ScreenType",
		ia."TaxApplied",
		ia."AdjustmentFactor",
		ia."Expired",
		ia."Category",
		ia."BuiltupWeight",
		ia."BuiltupPrice",
		ia."HotrolledWeight",
		ia."HotrolledPrice",
		ia."ColdformWeight",
		ia."ColdformPrice",
		ia."FabColdformWeight",
		ia."FabColdformPrice",
		ia."RoofpanelWeight",
		ia."RoofpanelPrice",
		ia."WallpanelWeight",
		ia."WallpanelPrice",
		ia."TrimWeight",
		ia."TrimPrice",
		ia."BuyoutsWeight",
		ia."BuyoutsPrice",
		ia."WarehouseWeight",
		ia."WarehousePrice",
		ia."OtherWeight",
		ia."OtherPrice",
		ia."AdditionalEngineering",
		ia."DrawingsCalcs",
		ia."WTWarranty",
		ia.insulation,
		ia."Freight",
		ia."FabricatedICF",
		ia."BuyoutMarkup",
		ia."DetailsByPercentage",
		ia."MezzanineNumber",
		ia."RmgPrice",
		ia."ProjectId",
		ia."IpAddress",
		ia."IsDelete",
		ia."CreatedBy",
		ia."CreatedDate"
    FROM "Input_AddLines" ia
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x4 ON ia."BuildingInformationId" = x4.ExistingBuildingInformationId;
	INSERT INTO "Input_NetAddLineDetails"(
		"Guid",
		"Description",
		"Weight",
		"SellPrice",
		"Cost",
		"Margin",
		"Markup",
		"HeaderId")
	SELECT
		NewGuid,
		ind."Description",
		ind."Weight",
		ind."SellPrice",
		ind."Cost",
		ind."Margin",
		ind."Markup",
		ind."HeaderId"
	FROM "Input_NetAddLineDetails" ind
    INNER JOIN "Input_AddLines" ia ON ind."Guid" = ia."Guid"
    INNER JOIN "BuildingInformation" bi ON ia."BuildingInformationId" = bi."BuildingInformationId"
    WHERE bi."ProjectId" = ProjectId;
	INSERT INTO "Input_Endwall"(
		"BuildingNo",
		"FrameType",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"ProjectId",
		"EndWallNo",
		"ElevationType",
		"IsDeleted",
		"ColumnSpacingType",
		"InsulationTrim",
		"NonStandardSetback",
		"DesignedSetback",
		"SpecifiedSetback",
		"BayCount",
		"GableFlash")
	SELECT
		x5.NewBuildingInformationId,
		ie."FrameType",
		ie."CreatedBy",
		ie."CreatedDate",
		ie."IpAddress",
		ie."ProjectId",
		ie."EndWallNo",
		ie."ElevationType",
		ie."IsDeleted",
		ie."ColumnSpacingType",
		ie."InsulationTrim",
		ie."NonStandardSetback",
		ie."DesignedSetback",
		ie."SpecifiedSetback",
		ie."BayCount",
		ie."GableFlash"
	FROM "Input_Endwall" ie
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x5 ON ie."BuildingNo" = x5.ExistingBuildingInformationId;
	INSERT INTO "OpenAreas"(
		"BuildingNumber",
		"Elevation",
		"BayNumber",
		"DistFromLeftCorner",
		"DistFromLeftColumn",
		"OpeningType",
		"OpenEndwall",
		"OpeningWidth",
		"OpeningHeight",
		"MaterialType",
		"MaterialWeight",
		"MaterialThickness",
		"DistSteelLinetoBeam",
		"DistSteelLinetoMaterial",
		"MasonryType",
		"MaterialDirection",
		"ShearWall",
		"PercentOpenforWind",
		"LeftJamb",
		"LeftJambFlash",
		"LeftJambFlangeWidth",
		"LeftJambFlangeThick",
		"LeftJambWebDepth",
		"LeftJambWebThick",
		"RightJamb",
		"RightJambFlash",
		"RightJambFlangeWidth",
		"RightJambFlangeThick",
		"RightJambWebDepth",
		"RightJambWebThick",
		"HeaderFlash",
		"HeaderFlashType",
		"HeaderFlashColor",
		"AttachmentNumber",
		"AllowableDrift",
		"BeamSelected",
		"BeamStartCol",
		"BeamStopCol",
		"BeamHeight",
		"BeamFlanges",
		"BeamWebThick",
		"BeamWebDepth",
		"BeamFlangeThick",
		"BeamFlangeWidth",
		"BeamDeflection",
		"BeamAttachmentSpacing",
		"BeamSteelline",
		"BeamSection",
		"BeamWeight",
		"BeamPrice",
		"BeamIsPriced",
		"BeamErrorCode",
		"LedgerAngle",
		"AllElevations",
		"ColumnBracing",
		"NoOutsideColumns",
		"PanelsSpan",
		"NoFlangeBelow",
		"AllowableInsulation",
		"PartitionNumber",
		"DeductPanelsTrimOnly",
		"FullWidth",
		"ParapetByOther",
		"HeaderFlashColorValsparCode",
		"HeaderFlashColorSpecialName",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted")
	SELECT
		x6.NewBuildingInformationId,
		oa."Elevation",
		oa."BayNumber",
		oa."DistFromLeftCorner",
		oa."DistFromLeftColumn",
		oa."OpeningType",
		oa."OpenEndwall",
		oa."OpeningWidth",
		oa."OpeningHeight",
		oa."MaterialType",
		oa."MaterialWeight",
		oa."MaterialThickness",
		oa."DistSteelLinetoBeam",
		oa."DistSteelLinetoMaterial",
		oa."MasonryType",
		oa."MaterialDirection",
		oa."ShearWall",
		oa."PercentOpenforWind",
		oa."LeftJamb",
		oa."LeftJambFlash",
		oa."LeftJambFlangeWidth",
		oa."LeftJambFlangeThick",
		oa."LeftJambWebDepth",
		oa."LeftJambWebThick",
		oa."RightJamb",
		oa."RightJambFlash",
		oa."RightJambFlangeWidth",
		oa."RightJambFlangeThick",
		oa."RightJambWebDepth",
		oa."RightJambWebThick",
		oa."HeaderFlash",
		oa."HeaderFlashType",
		oa."HeaderFlashColor",
		oa."AttachmentNumber",
		oa."AllowableDrift",
		oa."BeamSelected",
		oa."BeamStartCol",
		oa."BeamStopCol",
		oa."BeamHeight",
		oa."BeamFlanges",
		oa."BeamWebThick",
		oa."BeamWebDepth",
		oa."BeamFlangeThick",
		oa."BeamFlangeWidth",
		oa."BeamDeflection",
		oa."BeamAttachmentSpacing",
		oa."BeamSteelline",
		oa."BeamSection",
		oa."BeamWeight",
		oa."BeamPrice",
		oa."BeamIsPriced",
		oa."BeamErrorCode",
		oa."LedgerAngle",
		oa."AllElevations",
		oa."ColumnBracing",
		oa."NoOutsideColumns",
		oa."PanelsSpan",
		oa."NoFlangeBelow",
		oa."AllowableInsulation",
		oa."PartitionNumber",
		oa."DeductPanelsTrimOnly",
		oa."FullWidth",
		oa."ParapetByOther",
		oa."HeaderFlashColorValsparCode",
		oa."HeaderFlashColorSpecialName",
		oa."CreatedBy",
		oa."CreatedDate",
		oa."IpAddress",
		oa."IsDeleted"
	FROM "OpenAreas" oa
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x6 ON oa."BuildingNumber" = x6.ExistingBuildingInformationId;
	INSERT INTO "Input_Endwalls_ColumnSpacing"(
		"BuildingNo",
		"CSType",
		"BayNo",
		"BaySpacing",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"EndWallID",
		"IsDeleted")
	SELECT
		x7.NewBuildingInformationId,
		iecs."CSType",
		iecs."BayNo",
		iecs."BaySpacing",
		iecs."CreatedBy",
		iecs."CreatedDate",
		iecs."IpAddress",
		iecs."EndWallID",
		iecs."IsDeleted"
	FROM "Input_Endwalls_ColumnSpacing" iecs
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x7 ON iecs."BuildingNo" = x7.ExistingBuildingInformationId;        
	INSERT INTO "Input_Endwalls_Recesses"(
		"BuildingNo",
		"EWRType",
		"RecessNo",
		"Recesses",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"EndWallID",
		"IsDeleted",
		"IsFrameColumn")
	SELECT
		x8.NewBuildingInformationId,
		ier."EWRType",
		ier."RecessNo",
		ier."Recesses",
		ier."CreatedBy",
		ier."CreatedDate",
		ier."IpAddress",
		ier."EndWallID",
		ier."IsDeleted",
		ier."IsFrameColumn"
	FROM "Input_Endwalls_Recesses" ier
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x8 ON ier."BuildingNo" = x8.ExistingBuildingInformationId;
	INSERT INTO "BFM_Groups"(
		"BuildingNumber",
		"ColType1",
		"ColType2",
		"WebDepth1",
		"WebDepth2",
		"RafterDepth1",
		"RafterDepth2",
		"Clearspan",
		"IsElevation1",
		"IsElevation2",
		"Elevation1",
		"Elevation2",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"ProjectId",
		"GroupNumber",
		"HighStrengthWashers",
		"ExtColRecession1",
		"ExtColRecession2",
		"IsAdvanceColumn",
		"IntColMaxWebDepth",
		"IntColType",
		"IntColRecession",
		"IntColBaseType",
		"IntColHeaderType",
		"GroutThickness",
		"ShimsByCeco",
		"PlatedBolts",
		"FrameWeldingInspection",
		"Unsupported1",
		"Unsupported2",
		"UnsupportedElevation1",
		"UnsupportedElevation2")
	SELECT
		x9.NewBuildingInformationId,
		bg."ColType1",
		bg."ColType2",
		bg."WebDepth1",
		bg."WebDepth2",
		bg."RafterDepth1",
		bg."RafterDepth2",
		bg."Clearspan",
		bg."IsElevation1",
		bg."IsElevation2",
		bg."Elevation1",
		bg."Elevation2",
		bg."CreatedBy",
		bg."CreatedDate",
		bg."IpAddress",
		bg."IsDeleted",
		bg."ProjectId",
		bg."GroupNumber",
		bg."HighStrengthWashers",
		bg."ExtColRecession1",
		bg."ExtColRecession2",
		bg."IsAdvanceColumn",
		bg."IntColMaxWebDepth",
		bg."IntColType",
		bg."IntColRecession",
		bg."IntColBaseType",
		bg."IntColHeaderType",
		bg."GroutThickness",
		bg."ShimsByCeco",
		bg."PlatedBolts",
		bg."FrameWeldingInspection",
		bg."Unsupported1",
		bg."Unsupported2",
		bg."UnsupportedElevation1",
		bg."UnsupportedElevation2"
	FROM "BFM_Groups" bg
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x9 ON bg."BuildingNumber" = x9.ExistingBuildingInformationId;
	INSERT INTO "BFM_FrameLines"(
		"BuildingNumber",
		"GroupNumber",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"ProjectId",
		"FrameLineNumber",
		"DesignGroupNumber")
	SELECT
		x10.NewBuildingInformationId,
		bf."GroupNumber",
		bf."CreatedBy",
		bf."CreatedDate",
		bf."IpAddress",
		bf."IsDeleted",
		OutputId,
		bf."FrameLineNumber",
		bf."DesignGroupNumber"
	FROM "BFM_FrameLines" bf
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x10 ON bf."BuildingNumber" = x10.ExistingBuildingInformationId;
	INSERT INTO "BFM_Columns"(
		"BuildingNumber",
		"GroupNumber",
		"IntColType",
		"IntColRecess",
		"IntColHeaderType",
		"IntColMaxWebDepth",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"ProjectId",
		"IntColBaseType",
		"ColumnNumber",
		"BracedBays")
	SELECT
		x11.NewBuildingInformationId,
		bc."GroupNumber",
		bc."IntColType",
		bc."IntColRecess",
		bc."IntColHeaderType",
		bc."IntColMaxWebDepth",
		bc."CreatedBy",
		bc."CreatedDate",
		bc."IpAddress",
		bc."IsDeleted",
		OutputId,
		bc."IntColBaseType",
		bc."ColumnNumber",
		bc."BracedBays"
	FROM "BFM_Columns" bc
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x11 ON bc."BuildingNumber" = x11.ExistingBuildingInformationId;
	INSERT INTO "BFM_Modules"(
		"BuildingNumber",
		"GroupNumber",
		"Width",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDeleted",
		"ProjectId",
		"ModuleNumber")
	SELECT
		x12.NewBuildingInformationId,
		bm."GroupNumber",
		bm."Width",
		bm."CreatedBy",
		bm."CreatedDate",
		bm."IpAddress",
		bm."IsDeleted",
		OutputId,
		bm."ModuleNumber"
	FROM "BFM_Modules" bm
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x12 ON bm."BuildingNumber" = x12.ExistingBuildingInformationId;
	INSERT INTO "Bracing"(
		"BuildingNumber",
		"SW1BracingType",
		"SW1Tiers",
		"SW1BracingLocations",
		"SW1UnbraceableLocations",
		"SW1ExcludeDiaphragm",
		"SW2BracingType",
		"SW2Tiers",
		"SW2BracingLocations",
		"SW2UnbraceableLocations",
		"SW2ExcludeDiaphragm",
		"EW3BracingType",
		"EW3Tiers",
		"EW3BracingLocations",
		"EW3UnbraceableLocations",
		"EW3ExcludeDiaphragm",
		"EW4BracingType",
		"EW4Tiers",
		"EW4BracingLocations",
		"EW4UnbraceableLocations",
		"EW4ExcludeDiaphragm",
		"RoofBracingType",
		"RoofBracingLocations",
		"RoofUnbraceableLocations",
		"RoofExcludeDiaphragm",
		"Purlins",
		"Girts",
		"ErectionRods",
		"AllowTorsion",
		"ErectionBayWidth",
		"RafterFlangeBrace",
		"ColumnFlangeBrace",
		"SW1PFrameType",
		"SW1PFrameHeight",
		"SW2PFrameType",
		"SW2PFrameHeight",
		"SW1FBBCRight",
		"SW2FBBCRight",
		"SW1Girts",
		"SW2Girts",
		"EW3Girts",
		"EW4Girts",
		"EW3PFrameType",
		"EW3PFrameHeight",
		"EW4PFrameType",
		"EW4PFrameHeight",
		"OverrideFlangeBraceRoof",
		"OverrideFlangeBraceWall",
		"CreatedBy",
		"CreatedDate",
		"IsDelete",
		"IpAddress",
		"BuildingInformationId",
		"LBPBracingLocation",
		"IsReset",
		"PortalRafterDepth1",
		"PortalRafterDepth2",
		"PortalRafterDepth3",
		"PortalRafterDepth4")
	SELECT 
		x13.NewBuildingInformationId,
		br."SW1BracingType",
		br."SW1Tiers",
		br."SW1BracingLocations",
		br."SW1UnbraceableLocations",
		br."SW1ExcludeDiaphragm",
		br."SW2BracingType",
		br."SW2Tiers",
		br."SW2BracingLocations",
		br."SW2UnbraceableLocations",
		br."SW2ExcludeDiaphragm",
		br."EW3BracingType",
		br."EW3Tiers",
		br."EW3BracingLocations",
		br."EW3UnbraceableLocations",
		br."EW3ExcludeDiaphragm",
		br."EW4BracingType",
		br."EW4Tiers",
		br."EW4BracingLocations",
		br."EW4UnbraceableLocations",
		br."EW4ExcludeDiaphragm",
		br."RoofBracingType",
		br."RoofBracingLocations",
		br."RoofUnbraceableLocations",
		br."RoofExcludeDiaphragm",
		br."Purlins",
		br."Girts",
		br."ErectionRods",
		br."AllowTorsion",
		br."ErectionBayWidth",
		br."RafterFlangeBrace",
		br."ColumnFlangeBrace",
		br."SW1PFrameType",
		br."SW1PFrameHeight",
		br."SW2PFrameType",
		br."SW2PFrameHeight",
		br."SW1FBBCRight",
		br."SW2FBBCRight",
		br."SW1Girts",
		br."SW2Girts",
		br."EW3Girts",
		br."EW4Girts",
		br."EW3PFrameType",
		br."EW3PFrameHeight",
		br."EW4PFrameType",
		br."EW4PFrameHeight",
		br."OverrideFlangeBraceRoof",
		br."OverrideFlangeBraceWall",
		br."CreatedBy",
		br."CreatedDate",
		br."IsDelete",
		br."IpAddress",
		br."BuildingInformationId",
		br."LBPBracingLocation",
		br."IsReset",
		br."PortalRafterDepth1",
		br."PortalRafterDepth2",
		br."PortalRafterDepth3",
		br."PortalRafterDepth4"
	FROM "Bracing" br
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x13 ON br."BuildingNumber" = x13.ExistingBuildingInformationId;
	INSERT INTO "Bracing_XBraceAnchor"(
		"BayNumber",
		"DistFromLeftCornerLeft",
		"DistFromLeftColumnLeft",
		"DistFromLeftCornerRight",
		"DistFromLeftColumnRight",
		"LeftSteelLine",
		"BracingId",
		"BuildingInformationId",
		"Elevation")
	SELECT
		"BayNumber",
		"DistFromLeftCornerLeft",
		"DistFromLeftColumnLeft",
		"DistFromLeftCornerRight",
		"DistFromLeftColumnRight",
		"LeftSteelLine",
		NewBracingId,
		NewBuildingInformationId,
		"Elevation"
	FROM "Bracing_XBraceAnchor"
    WHERE "BuildingInformationId" IN (SELECT "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId);
	INSERT INTO "EndWallPotalFrame"(
		"EW3Height",
		"EW3HeightValue",
		"EW3RodTiers",
		"EW3WebDepthMaxColumn",
		"EW3WebDepthMaxRafter",
		"EW4Height",
		"EW4HeightValue",
		"EW4RodTiers",
		"EW4WebDepthMaxColumn",
		"EW4WebDepthMaxRafter",
		"BracingId",
		"BuildingInformationId")
	SELECT
		"EW3Height",
		"EW3HeightValue",
		"EW3RodTiers",
		"EW3WebDepthMaxColumn",
		"EW3WebDepthMaxRafter",
		"EW4Height",
		"EW4HeightValue",
		"EW4RodTiers",
		"EW4WebDepthMaxColumn",
		"EW4WebDepthMaxRafter",
		NewBracingId,
		NewBuildingInformationId
	FROM "EndWallPotalFrame"
    WHERE "BuildingInformationId" IN (SELECT "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId);
	INSERT INTO "SideWallPortalFrame"(
		"SW1Height",
		"SW1HeightValue",
		"SW1RodTiers",
		"SW1WebDepthMaxColumn",
		"SW1WebDepthMaxRafter",
		"SW2Height",
		"SW2HeightValue",
		"SW2RodTiers",
		"SW2WebDepthMaxColumn",
		"SW2WebDepthMaxRafter",
		"BracingId",
		"BuildingInformationId")
	SELECT
		"SW1Height",
		"SW1HeightValue",
		"SW1RodTiers",
		"SW1WebDepthMaxColumn",
		"SW1WebDepthMaxRafter",
		"SW2Height",
		"SW2HeightValue",
		"SW2RodTiers",
		"SW2WebDepthMaxColumn",
		"SW2WebDepthMaxRafter",
		NewBracingId,
		NewBuildingInformationId
	FROM "SideWallPortalFrame"
    WHERE "BuildingInformationId" IN (SELECT "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId);
	INSERT INTO "Input_Roof"(
		"Type",
		"Gauge",
		"ULRating",
		"Width",
		"Profile",
		"Thick",
		"Clip",
		"NotByStar",
		"StructScrews",
		"StitchScrews",
		"Material",
		"ThermalBlock",
		"MetalRibClosure",
		"SealedRoof",
		"RidgePan",
		"AlignmentStrip",
		"ULLetter",
		"EavePanelExtension",
		"IsBuyout",
		"SquareFeet",
		"ThermalBlockThickness",
		"ProvideBlocks",
		"RoofFirst",
		"InsulationClips",
		"Weathertightness",
		"SealedEave",
		"ThickInsulation",
		"RTSSystem",
		"RTSFinish",
		"RTSPanelType",
		"RTSThickness",
		"RTSSpacing",
		"ThermalBlockType",
		"FastenerType",
		"FastenerHeadFinish",
		"FastenerLength",
		"WideTape",
		"EaveIcing",
		"Warranty",
		"FactoryAppliedSealant",
		"WeathertightnessTerm",
		"IMPAccLoads",
		"SeamerRental",
		"StainlessSteelCaps",
		"NonhandedErection",
		"Direction",
		"ProvideHandTools",
		"RTSPanelGauge",
		"FastenerVender",
		"ExteriorSkinTexture",
		"FMRating",
		"RoofNavNumber",
		"WindRating",
		hass5clamps,
		"IMPPlant",
		"IMPLoads",
		"IncludeToolKit",
		"ColdStorageBuilding",
		"InteriorSkinProfile",
		"InteriorSkinGauge",
		"InteriorSkinTexture",
		"HasSnowRetentionSystem",
		"SnowRetentionRp1",
		"SnowRetentionRp2",
		"SnowRetentionRp3",
		"SnowRetentionRp4",
		"IncludeSnowClipPerPanel",
		"SnowClipQuantity",
		"ColorStripQuantity",
		"Rp1SnowLoad",
		"Rp2SnowLoad",
		"Rp3SnowLoad",
		"Rp4SnowLoad",
		"BuildingInformationId",
		"IpAddress",
		"CreatedBy",
		"CreatedDate",
		"BURLoad",
		"FinishWarranty",
		"RValue")
	SELECT
		ir."Type",
		ir."Gauge",
		ir."ULRating",
		ir."Width",
		ir."Profile",
		ir."Thick",
		ir."Clip",
		ir."NotByStar",
		ir."StructScrews",
		ir."StitchScrews",
		ir."Material",
		ir."ThermalBlock",
		ir."MetalRibClosure",
		ir."SealedRoof",
		ir."RidgePan",
		ir."AlignmentStrip",
		ir."ULLetter",
		ir."EavePanelExtension",
		ir."IsBuyout",
		ir."SquareFeet",
		ir."ThermalBlockThickness",
		ir."ProvideBlocks",
		ir."RoofFirst",
		ir."InsulationClips",
		ir."Weathertightness",
		ir."SealedEave",
		ir."ThickInsulation",
		ir."RTSSystem",
		ir."RTSFinish",
		ir."RTSPanelType",
		ir."RTSThickness",
		ir."RTSSpacing",
		ir."ThermalBlockType",
		ir."FastenerType",
		ir."FastenerHeadFinish",
		ir."FastenerLength",
		ir."WideTape",
		ir."EaveIcing",
		ir."Warranty",
		ir."FactoryAppliedSealant",
		ir."WeathertightnessTerm",
		ir."IMPAccLoads",
		ir."SeamerRental",
		ir."StainlessSteelCaps",
		ir."NonhandedErection",
		ir."Direction",
		ir."ProvideHandTools",
		ir."RTSPanelGauge",
		ir."FastenerVender",
		ir."ExteriorSkinTexture",
		ir."FMRating",
		ir."RoofNavNumber",
		ir."WindRating",
		ir.hass5clamps,
		ir."IMPPlant",
		ir."IMPLoads",
		ir."IncludeToolKit",
		ir."ColdStorageBuilding",
		ir."InteriorSkinProfile",
		ir."InteriorSkinGauge",
		ir."InteriorSkinTexture",
		ir."HasSnowRetentionSystem",
		ir."SnowRetentionRp1",
		ir."SnowRetentionRp2",
		ir."SnowRetentionRp3",
		ir."SnowRetentionRp4",
		ir."IncludeSnowClipPerPanel",
		ir."SnowClipQuantity",
		ir."ColorStripQuantity",
		ir."Rp1SnowLoad",
		ir."Rp2SnowLoad",
		ir."Rp3SnowLoad",
		ir."Rp4SnowLoad",
		x13.NewBuildingInformationId,
		ir."IpAddress",
		ir."CreatedBy",
		ir."CreatedDate",
		ir."BURLoad",
		ir."FinishWarranty",
		ir."RValue"
	FROM "Input_Roof" ir
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x13 ON ir."BuildingInformationId" = x13.ExistingBuildingInformationId;
	INSERT INTO "Input_Wall"(
		"BuildingInformationId",
		"Type",
		"Gauge",
		"Thick",
		"BaseFraming",
		"BaseFlash",
		"BaseClosure",
		"SealedWall",
		"Washers",
		"Notch",
		"RakeClosure",
		"EaveClosureStrip",
		"FastenerType",
		"FastenerHeadFinish",
		"FastenerLength",
		"Warranty",
		"FactoryAppliedSealant",
		"ReverseRolled",
		"OutsideMetalClosure",
		"SidelapSealant",
		"ColdStorageBuilding",
		"ExteriorSkinProfile",
		"ExteriorSkinTexture",
		"InteriorSkinProfile",
		"InteriorSkinTexture",
		"InteriorSkinGauge",
		"Width",
		"NotchWidth",
		"NotchDepth",
		"NotchType",
		"RValue",
		"UValue",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDelete",
		"FoamTape")
	SELECT
		x14.NewBuildingInformationId,
		iw."Type",
		iw."Gauge",
		iw."Thick",
		iw."BaseFraming",
		iw."BaseFlash",
		iw."BaseClosure",
		iw."SealedWall",
		iw."Washers",
		iw."Notch",
		iw."RakeClosure",
		iw."EaveClosureStrip",
		iw."FastenerType",
		iw."FastenerHeadFinish",
		iw."FastenerLength",
		iw."Warranty",
		iw."FactoryAppliedSealant",
		iw."ReverseRolled",
		iw."OutsideMetalClosure",
		iw."SidelapSealant",
		iw."ColdStorageBuilding",
		iw."ExteriorSkinProfile",
		iw."ExteriorSkinTexture",
		iw."InteriorSkinProfile",
		iw."InteriorSkinTexture",
		iw."InteriorSkinGauge",
		iw."Width",
		iw."NotchWidth",
		iw."NotchDepth",
		iw."NotchType",
		iw."RValue",
		iw."UValue",
		iw."CreatedBy",
		iw."CreatedDate",
		iw."IpAddress",
		iw."IsDelete",
		iw."FoamTape"
	FROM "Input_Wall" iw
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x14 ON iw."BuildingInformationId" = x14.ExistingBuildingInformationId;
	INSERT INTO "Input_Trim"(
		"BuildingNumber",
		"SW1TrimOption",
		"SW2TrimOption",
		"EW3TrimOption",
		"EW4TrimOption",
		"SW1NorthernGutter",
		"SW2NorthernGutter",
		"EW3NorthernGutter",
		"EW4NorthernGutter",
		"SW1GutterSize",
		"SW2GutterSize",
		"EW3GutterSize",
		"EW4GutterSize",
		"SW1IncludeElbows",
		"SW2IncludeElbows",
		"EW3IncludeElbows",
		"EW4IncludeElbows",
		"SW1Drops",
		"SW2Drops",
		"EW3Drops",
		"EW4Drops",
		"SW1DropHeight",
		"SW2DropHeight",
		"EW3DropHeight",
		"EW4DropHeight",
		"TrimProfile",
		"AdditionalGutterSupports",
		"IsSW1MatchEavaHeight",
		"IsSW2MatchEavaHeight",
		"IsEW3MatchEavaHeight",
		"IsEW4MatchEavaHeight",
		"CreatedBy",
		"CreatedDate",
		"IpAddress",
		"IsDelete",
		"StructScrews",
		"StitchScrews",
		"DistFromBase",
		"EaveTrimType",
		"WallCategory",
		"IsBuyout",
		"SquareFeet",
		"GutterType",
		"SW1GutterDesignSize",
		"DownspoutType",
		"SW2GutterDesignSize",
		"BaseOption",
		"UseType2Trim",
		"EW3GutterDesignSize",
		"EW4GutterDesignSize",
		"SillClosures",
		"BaseDetail",
		"BaseTrim",
		"FastenerVender",
		"IMPPlant",
		"IMPLoads")
	SELECT
		x15.NewBuildingInformationId,
		it."SW1TrimOption",
		it."SW2TrimOption",
		it."EW3TrimOption",
		it."EW4TrimOption",
		it."SW1NorthernGutter",
		it."SW2NorthernGutter",
		it."EW3NorthernGutter",
		it."EW4NorthernGutter",
		it."SW1GutterSize",
		it."SW2GutterSize",
		it."EW3GutterSize",
		it."EW4GutterSize",
		it."SW1IncludeElbows",
		it."SW2IncludeElbows",
		it."EW3IncludeElbows",
		it."EW4IncludeElbows",
		it."SW1Drops",
		it."SW2Drops",
		it."EW3Drops",
		it."EW4Drops",
		it."SW1DropHeight",
		it."SW2DropHeight",
		it."EW3DropHeight",
		it."EW4DropHeight",
		it."TrimProfile",
		it."AdditionalGutterSupports",
		it."IsSW1MatchEavaHeight",
		it."IsSW2MatchEavaHeight",
		it."IsEW3MatchEavaHeight",
		it."IsEW4MatchEavaHeight",
		it."CreatedBy",
		it."CreatedDate",
		it."IpAddress",
		it."IsDelete",
		it."StructScrews",
		it."StitchScrews",
		it."DistFromBase",
		it."EaveTrimType",
		it."WallCategory",
		it."IsBuyout",
		it."SquareFeet",
		it."GutterType",
		it."SW1GutterDesignSize",
		it."DownspoutType",
		it."SW2GutterDesignSize",
		it."BaseOption",
		it."UseType2Trim",
		it."EW3GutterDesignSize",
		it."EW4GutterDesignSize",
		it."SillClosures",
		it."BaseDetail",
		it."BaseTrim",
		it."FastenerVender",
		it."IMPPlant",
		it."IMPLoads"
	FROM "Input_Trim" it
    INNER JOIN (SELECT b1."ProjectId" ExistingProjectId, b2."ProjectId" NewProjectId, b1."BuildingInformationId" ExistingBuildingInformationId, b2."BuildingInformationId" NewBuildingInformationId FROM
        (SELECT "ProjectId", "BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = ProjectId ORDER BY "BuildingInformationId")b1,
        (SELECT "ProjectId","BuildingInformationId" FROM "BuildingInformation" WHERE "ProjectId" = OutputId ORDER BY "BuildingInformationId")b2)x15 ON it."BuildingNumber" = x15.ExistingBuildingInformationId;        
END Quote_Management2;
/